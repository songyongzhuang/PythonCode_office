1、尽量每个用例之间保持独立性。
    web用例：页面的操作。一个用例可以涉及了一个页面、N个页面。一旦失败不确定它是否断言失败，或者某一个页面失败
    用例的运行过程中：不知道他会失败在那个页面。
        如果他失败在了某一个页面，而另一个用例根本不是在这个页面开始的，下一个用例一定不能运行
    任何其他用例的成功或失败，都不能够影响当前用例的执行。

    业务流程：五个用户参与。    一个测试类下面写五个测试用例。
            复杂的逻辑特别容易出bug。 尽量降低复杂度、重复度
    复杂的业务流程：一个流程节点就是一个用例。

2、追求稳定性。(用例越简单越好)

测试对象(页面对象)、测试用例(页面的函数调用+测试数据)
进一步分层：测试数据
独立出测试数据：(集成测试环境、线上环境)
1、测试数据有变更，可以不用去测试用例里面去找对应的测试数据
2、在不同的测试环境当中，只修改 - 不同的数据

3、测试数据管理 - 写到py文件中
    其他页面需要就直接调用数据

================================  web自动化框架 ================================
1、提供的功能
2、测试执行日志、异常信息捕获处理、失败页面截图、
3、测试报告

执行日志：用例层 == 页面对象层(每一个函数) == selenium基本操作拼接起来(元素等待、元素查找、元素操作)
basepage：元素等待(等待可见/存在)、元素查找(find_element)、元素操作(click,send_keys,text,get)
    窗口切换：当前页面的url获取、iframe切换
    1、等待元素可见行为：try 元素可见 except：失败截图/详细异常信息写入日志
    2、等待圆度存在行为：try 元素存在 except：失败截图/详细异常信息写入日志
    3、查找元素行为：
    4、点击行为(传元素定位表达式)：1)等待元素可见、2)查找元素、3)点击
    5、输入行为(传元素定位表达式)：1)等待元素可见、2)查找元素、3)输入
    6、获取元素文本(传元素定位表达式：1)、等待元素存在、2查找元素)、3)输入动作
    7、获取元素属性(传元素定位表达式：1)、等待元素存在、2查找元素)、3)输入动作
    8、其他操作 ...












