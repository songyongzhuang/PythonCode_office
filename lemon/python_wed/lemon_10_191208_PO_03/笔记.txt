1、尽量用例 之间 保持独立性。
   web用例：页面的操作。 一个用例涉及了1个页面、N个页面。
   用例的运行过程 ：你是不知道它会失败在哪个页面的。
   任何其它用例的成功或者失败，都不能够影响当前用例的执行。

   业务流程：5个用户参与。
            复杂的业务流程：一个流程节点就是一个用例。

2、追求稳定性(用例越简单越好)。

3、尽量不依赖环境。

4、自动化测试的帐号，尽量独立。


分离出测试数据：
测试对象(页面对象)、测试用例(页面的函数调用+测试数据)
进一步分层：
独立出测试数据：（集成测试环境、预发布环境）
1、测试数据有变更，可以不用去测试用例里面去找对应的测试数据。
2、在不同的测试环境当中，只修改 - 不同的数据。

测试数据应该在哪儿管理呢？ excel管理？配置文件管理？yaml管理？
python文件。

写web自动化模块功能用例：
想清楚：
1、自己打开excel,把用例的前置、步骤、期望(断言)、后置写出来。
2、操作页面 - 分析页面。用例中涉及了页面的哪些功能。有没有什么共性。
写代码：
1、封装页面 - 页面对象 + 元素定位
2、测试数据 - 单独管理
3、编写用例 - 调用页面的函数 + 测试数据

PO模式(测试对象和测试用例的分离) - 测试用例编写


=================================== web自动化框架 ====================================
1、拿给别人用。你提供了什么功能？？
2、测试执行日志、异常信息捕获处理、失败页面截图。
3、测试报告

执行日志：用例层 == 页面对象层(每一个函数) == selenium基本操作拼接起来(元素等待、元素查找、元素操作)
basepage: 元素等待(等待可见/存在)、元素查找(find_element)、元素操作(click,send_keys,text,get_attribute)
          窗口切换、当前页面的url获取、iframe切换。
          1、等待元素可见行为：try 元素可见 except: 失败截图/详细异常信息写入日志
          2、等待元素存在行为：try 元素存在 except: 失败截图/详细异常信息写入日志
          3、查找元素行为：
          4、点击行为(传元素定位表达式)：1）等待元素可见；2）查找元素；3）点击
          5、输入行为(传元素定位表达式)：1）等待元素可见；2）查找元素；3）输入动作
          6、获取元素文本(传元素定位表达式)：1）等待元素存在；2）查找元素；3）输入动作
          7、获取元素属性(传元素定位表达式)：1）等待元素存在；2）查找元素；3）输入动作
          8、切换到新窗口：1）sleep 2秒   2）获取窗口列表；3）切换到最后一个
          9、获取url: